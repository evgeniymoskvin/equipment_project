# Generated by Django 4.2.20 on 2025-04-17 10:40

from django.db import migrations, models
import django.db.models.deletion
import equipment_app.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CityDepModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(max_length=100, verbose_name='Город')),
                ('name_dep', models.CharField(max_length=350, verbose_name='Наименование организации')),
            ],
            options={
                'verbose_name': 'город/организация',
                'verbose_name_plural': 'города/организации',
                'db_table': 'admin_panel_app_citydepmodel',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommandNumberModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('command_number', models.IntegerField(verbose_name='Номер отдела/Сокращение')),
                ('command_name', models.CharField(max_length=150, verbose_name='Наименование отдела')),
                ('show', models.BooleanField(default=True, verbose_name='Отображать отдел')),
            ],
            options={
                'verbose_name': 'номер отдела',
                'verbose_name_plural': 'номера отделов',
                'db_table': 'ToDo_tasks_commandnumbermodel',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EmployeeModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_name', models.CharField(max_length=150, verbose_name='Фамилия')),
                ('first_name', models.CharField(max_length=150, verbose_name='Имя')),
                ('middle_name', models.CharField(max_length=150, verbose_name='Отчество')),
                ('personnel_number', models.CharField(default=None, max_length=20, null=True, verbose_name='Табельный номер')),
                ('user_phone', models.IntegerField(blank=True, default=None, null=True, verbose_name='№ телефона внутренний')),
                ('right_to_sign', models.BooleanField(default=False, verbose_name='Право подписывать задания')),
                ('check_edit', models.BooleanField(default=True, verbose_name='Возможность редактирования задания')),
                ('can_make_task', models.BooleanField(default=True, verbose_name='Возможность выдавать задания')),
                ('cpe_flag', models.BooleanField(default=False, verbose_name='Флаг ГИП (техническая метка)')),
                ('mailing_list_check', models.BooleanField(default=True, verbose_name='Получать рассылку')),
                ('work_status', models.BooleanField(default=True, verbose_name='Сотрудник работает')),
            ],
            options={
                'verbose_name': 'сотрудник',
                'verbose_name_plural': 'сотрудники',
                'db_table': 'ToDo_tasks_employee',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GroupDepartmentModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_dep_abr', models.CharField(max_length=10, verbose_name='Сокращенное название управления')),
                ('group_dep_name', models.CharField(max_length=250, verbose_name='Полное название управления')),
                ('show', models.BooleanField(default=True, verbose_name='Отображать отдел')),
            ],
            options={
                'verbose_name': 'управление',
                'verbose_name_plural': 'управления',
                'db_table': 'ToDo_tasks_groupdepartmentmodel',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='JobTitleModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_title', models.CharField(max_length=200, verbose_name='Должность')),
            ],
            options={
                'verbose_name': 'должность',
                'verbose_name_plural': 'должности',
                'db_table': 'ToDo_tasks_jobtitlemodel',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MoreDetailsEmployeeModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(blank=True, null=True, upload_to=equipment_app.models.upload_to, verbose_name='Файл')),
                ('outside_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Внешняя почта')),
                ('mobile_phone', models.CharField(blank=True, max_length=30, null=True, verbose_name='Мобильный телефон')),
                ('date_birthday', models.DateField(blank=True, null=True, verbose_name='День рождения')),
                ('room', models.CharField(blank=True, max_length=30, null=True, verbose_name='Номер комнаты')),
                ('date_birthday_show', models.BooleanField(default=False, null=True, verbose_name='Отображать день рождения')),
                ('send_email_salary_blank', models.BooleanField(default=False, verbose_name='Отсылать расчетный листок')),
            ],
            options={
                'verbose_name': 'дополнительная информация по сотруднику',
                'verbose_name_plural': 'дополнительная информация по сотрудникам',
                'db_table': 'admin_panel_app_moredetailsemployeemodel',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TypeOfCoreModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('core_name', models.CharField(blank=True, max_length=250, null=True, verbose_name='Название процессора')),
                ('count_of_core', models.IntegerField(blank=True, null=True, verbose_name='Количество ядер')),
                ('core_frequency', models.IntegerField(blank=True, null=True, verbose_name='Частота процессора')),
                ('core_manufacturer', models.IntegerField(blank=True, null=True, verbose_name='Производитель')),
            ],
            options={
                'verbose_name': 'процессор',
                'verbose_name_plural': 'процессоры',
            },
        ),
        migrations.CreateModel(
            name='TypeOfEquipmentModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('equipment_type_name', models.CharField(blank=True, max_length=250, null=True, verbose_name='Тип оборудования')),
            ],
            options={
                'verbose_name': 'тип оборудования',
                'verbose_name_plural': 'типы оборудования',
            },
        ),
        migrations.CreateModel(
            name='TypeOfHardDiskModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_disk', models.IntegerField(blank=True, choices=[(1, 'HDD'), (2, 'SSD')], null=True, verbose_name='Тип диска')),
                ('disk_memory_size', models.IntegerField(blank=True, null=True, verbose_name='Размер память диска')),
                ('disk_manufacturer', models.CharField(blank=True, max_length=100, null=True, verbose_name='Производитель диска')),
                ('disk_interface', models.IntegerField(blank=True, choices=[(1, 'SATA'), (2, 'SAS'), (3, 'M2')], null=True, verbose_name='Интерфейс диска')),
            ],
            options={
                'verbose_name': 'жесткий диск',
                'verbose_name_plural': 'жесткие диски',
            },
        ),
        migrations.CreateModel(
            name='TypeOfRAMModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ram_type_name', models.CharField(blank=True, max_length=10, null=True, verbose_name='Название памяти')),
                ('ram_manufacturer', models.CharField(blank=True, max_length=100, null=True, verbose_name='Производитель RAM')),
                ('ram_frequency', models.IntegerField(blank=True, null=True, verbose_name='Частота RAM')),
                ('ram_memory_size', models.IntegerField(blank=True, null=True, verbose_name='Объем памяти RAM')),
                ('ram_memory_standard', models.IntegerField(blank=True, help_text='DDR4/DDR5', null=True, verbose_name='Стандарт памяти RAM')),
            ],
            options={
                'verbose_name': 'оперативная память',
                'verbose_name_plural': 'оперативные памяти',
            },
        ),
        migrations.CreateModel(
            name='TypeOfVideoCardModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video_card_name', models.CharField(blank=True, max_length=250, null=True, verbose_name='Название видеокарты')),
                ('video_card_memory_size', models.IntegerField(blank=True, null=True, verbose_name='Объем видеопамяти')),
            ],
            options={
                'verbose_name': 'видеокарта',
                'verbose_name_plural': 'видеокарты',
            },
        ),
        migrations.CreateModel(
            name='EquipmentSpecificationsModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('equipment_specifications_name', models.CharField(blank=True, max_length=250, null=True, verbose_name='Наименование')),
                ('diagonal', models.IntegerField(blank=True, null=True, verbose_name='Диагональ')),
                ('description', models.CharField(blank=True, max_length=250, null=True, verbose_name='Примечание')),
                ('type_of_print', models.IntegerField(blank=True, choices=[(1, 'Струйный'), (2, 'Лазерный')], null=True, verbose_name='Тип печати')),
                ('paper_format', models.IntegerField(blank=True, choices=[(4, 'A4'), (3, 'A3'), (2, 'A2'), (1, 'A1'), (0, 'A0')], null=True, verbose_name='Тип бумаги')),
                ('count_ethernet_ports', models.IntegerField(blank=True, null=True, verbose_name='Количество портов Ethernet')),
                ('core', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='equipment_app.typeofcoremodel', verbose_name='Процессор')),
                ('disk', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='equipment_app.typeofharddiskmodel', verbose_name='Жесткий диск')),
                ('equipment_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='equipment_app.typeofequipmentmodel', verbose_name='Тип оборудования')),
                ('ram', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='equipment_app.typeoframmodel', verbose_name='Оперативная память')),
                ('video_card', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='equipment_app.typeofvideocardmodel', verbose_name='Видеокарта')),
            ],
            options={
                'verbose_name': 'характеристика оборудования',
                'verbose_name_plural': 'характеристики оборудования',
            },
        ),
        migrations.CreateModel(
            name='EquipmentModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('equipment_name', models.CharField(blank=True, max_length=250, null=True, verbose_name='Наименование')),
                ('equipment_model', models.CharField(blank=True, max_length=250, null=True, verbose_name='Модель')),
                ('equipment_serial_number', models.CharField(blank=True, max_length=500, null=True, verbose_name='Серийный номер')),
                ('equipment_inventory_number', models.CharField(blank=True, max_length=250, null=True, verbose_name='Инвентарный номер')),
                ('barcode', models.CharField(blank=True, max_length=500, null=True, verbose_name='Штрих код')),
                ('description', models.CharField(blank=True, max_length=250, null=True, verbose_name='Примечание')),
                ('equipment_spec', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='equipment_app.equipmentspecificationsmodel', verbose_name='Характеристики')),
                ('equipment_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='equipment_app.typeofequipmentmodel', verbose_name='Тип техники')),
            ],
            options={
                'verbose_name': 'оборудование',
                'verbose_name_plural': 'оборудование',
            },
        ),
    ]
